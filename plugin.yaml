########
# Copyright (c) 2020 Cloudify Technologies Ltd. All rights reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
#    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    * See the License for the specific language governing permissions and
#    * limitations under the License.

plugins:
  nsx-t:
    package_name: cloudify-nsx-t-plugin
    source: https://github.com/Cloudify-PS/cloudify-nsx-t-plugin/archive/0.1.0.zip
    package_version: '0.1.0'
    executor: central_deployment_agent

dsl_definitions:

  client_config: &client_config
    client_config:
      type: cloudify.types.nsx-t.ClientConfig
      description: Your NSX-T Client Configuration.
      required: true

  id: &data_type_id
    id:
      description: Resource id
      type: string
      required: false

  display_name: &data_type_name
    display_name:
      description: >
        Identifier to use when displaying entity in logs or GUI Defaults to ID if not set.
      type: string
      required: false
      default: ''

  description: &data_type_description
    description:
      description: Description of this resource
      type: string
      required: false

  external_resource: &external_resource
    use_external_resource:
      description: Indicate whether the resource exists or if Cloudify should create the resource, true if you are bringing an existing resource, false if you want cloudify to create it.
      type: boolean
      default: false

  create_if_missing: &create_if_missing
    create_if_missing:
      type: boolean
      default: false
      description: If use_external_resource is ``true`` and the resource is missing,create it instead of failing.

data_types:
  cloudify.types.nsx-t.ClientConfig:
    properties:
      host:
        type: string
        description: Your NSX-T Manager Host IP.
        required: true
      port:
        type: string
        description: Your NSX-T Manager Port that listen on.
        required: true
      username:
        type: string
        description: Your NSX-T Manager Username.
        required: true
      password:
        type: string
        description: Your NSX-T Manager Password.
        required: true
      auth_type:
        type: string
        description: >
          Authentication Type
          1. basic
          2. session
        default: basic
        required: false
      insecure:
        type: string
        description: If true, SSL validation is skipped.
        required: false
      cert:
        type: string
        description: Your cert file path.
        required: false
  cloudify.types.nsx-t.LogicalSwitch:
    properties:
      <<: *data_type_name
      <<: *data_type_description
      <<: *data_type_id
      transport_zone_id:
        type: string
        required: true
        description: >
          Id of the TransportZone to which this LogicalSwitch is associated
      admin_state:
        type: string
        required: true
        description: >
          Represents Desired state of the Logical Switch
      global_vni:
        type: integer
        required: false
        description: >
          VNI allocated by the global manager
          The VNI is used for intersite traffic and the global logical switch ID.
          The global VNI pool is agnostic of the local VNI pool, and there is
          no need to have an exclusive VNI range. For example, VNI x can be
          the global VNI for logical switch B and the local VNI for logical switch A
      hybrid:
        type: boolean
        required: false
        default: false
        description: >
          Flag to identify a hybrid logical switch
          If this flag is set to true, then all the logical switch ports attached to
          this logical switch will behave in a hybrid fashion. The hybrid logical switch port
          indicates to NSX that the VM intends to operate in underlay mode,
          but retains the ability to forward egress traffic to the NSX overlay network.
          This flag can be enabled only for the logical switches in the overlay type transport zone which has
          host switch mode as STANDARD and also has either CrossCloud or CloudScope tag scopes.
          Only the NSX public cloud gateway (PCG) uses this flag, other host agents like ESX, KVM and Edge
          will ignore it. This property cannot be modified once the logical switch is created
      ip_pool_id:
        type: string
        required: false
        description: >
          Allocation ip pool associated with the Logical switch
          IP pool id that associated with a LogicalSwitch.
      mac_pool_id:
        type: string
        required: false
        description: >
          Allocation mac pool associated with the Logical switch
          Mac pool id that associated with a LogicalSwitch.
      replication_mode:
        type: string
        required: false
        description: >
          Replication mode of the Logical Switch. Enum: MTEP, SOURCE
      switch_type:
        type: string
        required: false
        default: DEFAULT
        description: >
          Type of LogicalSwitch.
          This field indicates purpose of a LogicalSwitch. It is set by manager internally
          or user can provide this field. If not set, DEFAULT type is assigned.
          NSX components can use this field to create LogicalSwitch that provides component
          specific functionality.
          DEFAULT type LogicalSwitches are created for basic L2 connectivity by API users.
          SERVICE_PLANE type LogicalSwitches are system created service plane LogicalSwitches for
          Service Insertion service. User can not create SERVICE_PLANE type of LogicalSwitch.
          DHCP_RELAY type LogicalSwitches are created by external user like Policy with special
          permissions or by system and will be treated as internal LogicalSwitches. Such
          LogicalSwitch will not be exposed to vSphere user.
          GLOBAL type LogicalSwitches are created to span multiple NSX domains to connect multiple
          remote sites.
          Enum: DEFAULT, SERVICE_PLANE, DHCP_RELAY, GLOBAL
      uplink_teaming_policy_name:
        type: string
        required: false
        description: >
          he name of the switching uplink teaming policy for the logical switch
          This name has to be one of the switching uplink teaming policy names
          listed inside the logical switch's TransportZone. If this field is
          not specified, the logical switch will not have a teaming policy
          associated with it and the host switch's default teaming policy will be used.
      vlan:
        type: integer
        required: false
        description: >
          VLAN Id of logical switch
          This property is dedicated to VLAN based network, to set VLAN of logical
          network. It is mutually exclusive with 'vlan_trunk_spec'.
      vni:
        type: integer
        required: false
        description: >
          VNI for this LogicalSwitch.
          Only for OVERLAY network. A VNI will be auto-allocated from the
          default VNI pool if not given; otherwise the given VNI has to be
          inside the default pool and not used by any other LogicalSwitch.
      vlan_trunk_spec:
        type: dict
        required: false
        description: >
          VLAN trunk spec of logical switch
          This property is used for VLAN trunk specification of logical switch.
          It's mutually exclusive with 'vlan'. Also it could be set to do guest VLAN
          tagging in overlay network. https://vdc-download.vmware.com/vmwb-repository/dcr-public/9e1c6bcc-85db-46b6-bc38-d6d2431e7c17/30af91b5-3a91-4d5d-8ed5-a7d806764a16/api_includes/types_VlanTrunkSpec.html
      span:
        type: list
        required: false
        description: >
          Opaque identifiers meaningful to the API user. https://code.vmware.com/apis/976/nsx-t
      tags:
        type: list
        required: false
      address_bindings:
        type: list
        required: false
        description: >
            Address bindings for the Logical switch. Array of PacketAddressClassifier
            https://vdc-download.vmware.com/vmwb-repository/dcr-public/9e1c6bcc-85db-46b6-bc38-d6d2431e7c17/30af91b5-3a91-4d5d-8ed5-a7d806764a16/api_includes/types_PacketAddressClassifier.html
      extra_configs:
        type: list
        required: false
        description: >
          Extra configs on logical switch
          This property could be used for vendor specific configuration in key value
          string pairs, the setting in extra_configs will be automatically inheritted
          by logical ports in the logical switch. Array of ExtraConfig https://vdc-download.vmware.com/vmwb-repository/dcr-public/9e1c6bcc-85db-46b6-bc38-d6d2431e7c17/30af91b5-3a91-4d5d-8ed5-a7d806764a16/api_includes/types_ExtraConfig.html

  cloudify.types.nsx-t.SegmentDhcpConfig:
    properties:
      dns_servers:
        type: list
        required: false
        default: []
        description: >
          IP address of DNS servers for subnet. DNS server IP address must
          belong to the same address family as segment gateway_address
          property.
      lease_time:
        type: integer
        required: false
        description: >
          DHCP lease time for subnet
          DHCP lease time in seconds. When specified, this property overwrites
          lease time configured DHCP server config.
      server_address:
        type: list
        required: false
        description: >
          IP address of the DHCP server in CIDR format.
          The server_address is mandatory in case this segment has provided a
          dhcp_config_path and it represents a DHCP server config.
          If this SegmentDhcpConfig is a SegmentDhcpV4Config, the address must
          be an IPv4 address. If this is a SegmentDhcpV6Config, the address must
          be an IPv6 address.
          This address must not overlap the ip-ranges of the subnet, or the
          gateway address of the subnet, or the DHCP static-binding addresses
          of this segment.
      options:
        type: dict
        required: false
        default: {}
        description: >
          DHCP options.


  cloudify.types.nsx-t.SegmentDhcpV4Config:
    derived_from: cloudify.types.nsx-t.SegmentDhcpConfig
    properties:
      resource_type:
        type: string
        required: false
        default: SegmentDhcpV4Config
  cloudify.types.nsx-t.SegmentDhcpV6Config:
    derived_from: cloudify.types.nsx-t.SegmentDhcpConfig
    properties:
      resource_type:
        type: string
        required: false
        default: SegmentDhcpV6Config
  cloudify.types.nsx-t.SegmentSubnet:
    properties:
      dhcp_v4_config:
        type: cloudify.types.nsx-t.SegmentDhcpV4Config
        required: false
        default: {}
        description: >
          Additional DHCP configuration for current subnet.
      dhcp_v6_config:
        type: cloudify.types.nsx-t.SegmentDhcpV6Config
        required: false
        default: {}
        description: >
          Additional DHCP configuration for current subnet.
      dhcp_ranges:
        type: list
        required: false
        default: []
        description: >
          DHCP address ranges are used for dynamic IP allocation.
          Supports address range and CIDR formats. First valid
          host address from the first value is assigned to DHCP server
          IP address. Existing values cannot be deleted or modified,
          but additional DHCP ranges can be added.
      gateway_address:
        type: string
        required: false
        description: >
          Gateway IP address in CIDR format for both IPv4 and IPv6.


  cloudify.types.nsx-t.Segment:
    properties:
      <<: *data_type_name
      <<: *data_type_description
      <<: *data_type_id
      admin_state:
        type: string
        required: false
        default: UP
        description: >
          Policy path to the transport zone
          supported:
          - UP
          - DOWN
      replication_mode:
        type: string
        required: false
        default: MTEP
        description: >
          Replication mode of the Segment
          If this field is not set for overlay segment, then the default of MTEP
          will be used
          The allowed valued are
          - MTEP
          - SOURCE
      transport_zone_path:
        type: string
        required: false
        default: UP
        description: >
          Policy path to the transport zone
          Policy path to the transport zone. Supported for VLAN backed segments
          as well as Overlay Segments. This field is required for VLAN backed
          Segments. Auto assigned if only one transport zone exists in the
          enforcement point. Default transport zone is auto assigned for
          overlay segments if none specified.
      connectivity_path:
        type: string
        required: false
        description: >
          Policy path to the connecting Tier-0 or Tier-1. Valid only for
          segments created under Infra.
      dhcp_config_path:
        type: string
        required: false
        description: >
          Policy path to DHCP server or relay configuration to use for all
          IPv4 & IPv6 subnets configured on this segment
      l2_extension:
        type: dict
        required: false
        description: >
          Configuration for extending Segment through L2 VPN
      domain_name:
        type: string
        required: false
        description: >
           DNS domain name
      extra_configs:
        type: list
        required: false
        description: >
          Extra configs on Segment
          This property could be used for vendor specific configuration in key value
          string pairs, the setting in extra_configs will be automatically inheritted
          by segment ports in the Segment.
          https://vdc-download.vmware.com/vmwb-repository/dcr-public/9e1c6bcc-85db-46b6-bc38-d6d2431e7c17/30af91b5-3a91-4d5d-8ed5-a7d806764a16/api_includes/types_SegmentExtraConfig.html
      metadata_proxy_paths:
        type: list
        required: false
        description: >
          Metadata Proxy Configuration Paths
          Policy path to metadata proxy configuration.
          Multiple distinct MD proxies can be configured.
      mac_pool_id:
        type: string
        required: false
        description: >
          Allocation mac pool associated with the Segment
          Mac pool id that associated with a Segment
      overlay_id:
        type: integer
        required: false
        description: >
            Overlay connectivity ID for this Segment
            Used for overlay connectivity of segments. The overlay_id
            should be allocated from the pool as definied by enforcement-point.
            If not provided, it is auto-allocated from the default pool on the
            enforcement-point.
      subnet:
        type: cloudify.types.nsx-t.SegmentSubnet
        required: false
        default: {}
      tags:
        type: list
        required: false
        description: >
          Opaque identifiers meaningful to the API user by having pairs of
          scope and tag to associate with this policy
          - scope: scop1
            tag: tag1
          - scope: sope2
            tag: tag2
          - scope: scop3
            tag: tag3

      address_bindings:
        type: list
        required: false
        description: >
          Address bindings for the Logical switch. Array of PacketAddressClassifier
          https://vdc-download.vmware.com/vmwb-repository/dcr-public/9e1c6bcc-85db-46b6-bc38-d6d2431e7c17/30af91b5-3a91-4d5d-8ed5-a7d806764a16/api_includes/types_PacketAddressClassifier.html
          Example
          - ip_address: 10.0.0.6
            mac_address:  a4:5e:60:e5:29:65
            vlan_id: 22
          - ip_address: 10.0.0.6
            mac_address: b3:2b:41:d5:18:74
            vlan_id: 23

      bridge_profiles:
        type: list
        required: false
        description: >
          Bridge Profile Configuration
          Multiple distinct L2 bridge profiles can be configured.
          Example
          - bridge_profile_path: /profile/bridge
            uplink_teaming_policy_name: policy1
            vlan_ids:
             - 22
             - 25
             - 29
            vlan_transport_zone_path: /vlan/transport/zone
      children:
        type: list
        required: false
        description: >
          subtree for this type within policy tree containing nested elements.
          https://vdc-download.vmware.com/vmwb-repository/dcr-public/9e1c6bcc-85db-46b6-bc38-d6d2431e7c17/30af91b5-3a91-4d5d-8ed5-a7d806764a16/api_includes/method_PatchInfraSegment.html
      advanced_config:
        type: dict
        required: false
        default: {}
        description: >
          Advanced configuration for Segment.
          the advanced config contains the following configuration
          address_pool_paths:
             - /path/address/pool1
             - /path/address/pool2
          connectivity: ON
          hybrid: false
          local_egress: false
          local_egress_routing_policies:
             - nexthop_address: 10.0.0.8
               prefix_list_paths:
                - /path/prefix1
                - /path/prefix2
            - nexthop_address: 10.0.0.12
              prefix_list_paths:
               - /path/prefix3
               - /path/prefix4
          multicast: false
          uplink_teaming_policy_name: policy-name

      vlan_ids:
        type: list
        required: false
        description: >
          VLAN ids for VLAN backed Segment. Can be a VLAN id or a range of VLAN ids specified with '-' in between.
          - 33
          - 44
          - 50-200


node_types:
  cloudify.nodes.nsx-t.LogicalSwitch:
    derived_from: cloudify.nodes.Root
    properties:
      <<: *client_config
      resource_config:
        type: cloudify.types.nsx-t.LogicalSwitch
        required: true
        description: A dictionary in order to create logical switch resource
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx-t.nsx_t_plugin.logical_switch.logical_switch.create
        delete:
          implementation: nsx-t.nsx_t_plugin.logical_switch.logical_switch.delete

  cloudify.nodes.nsx-t.Segment:
    derived_from: cloudify.nodes.Root
    properties:
      <<: *client_config
      resource_config:
        type: cloudify.types.nsx-t.Segment
        required: true
        description: A dictionary in order to create segment resource
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: nsx-t.nsx_t_plugin.segment.segment.create
        delete:
          implementation: nsx-t.nsx_t_plugin.segment.segment.delete
