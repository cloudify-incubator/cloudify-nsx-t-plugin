tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/5.1.0.dev1/types.yaml
  - plugin:cloudify-nsx-t-plugin
  - plugin:cloudify-vsphere-plugin


inputs:

  host:
    type: string

  port:
    type: string

  username:
    type: string

  password:
    type: string

  tier1_config:
    type: dict

  dhcp_server_config:
    type: dict

  segment_config:
    type: dict

  server_username:
    type: string
    default: centos

  server_name:
    type: string
    default: test-remote

  template:
    type: string
    default: { get_secret: centos_template }

  nsx_t_switch:
    type: boolean
    default: true

  allowed_clusters:
    type: string
    default: Cluster

  ip_address:
    type: string

dsl_definitions:

  client_config: &client_config
    host: { get_input: host }
    port: { get_input: port }
    username: { get_input: username }
    password: { get_input: password }

  connection_config: &connection_config
    username: { get_secret: vsphere_username }
    password: { get_secret: vsphere_password }
    host: { get_secret: vsphere_host }
    port: { get_secret: vsphere_port }
    datacenter_name: { get_secret: vsphere_datacenter_name }
    resource_pool_name: { get_secret: vsphere_resource_pool_name }
    auto_placement: { get_secret: vsphere_auto_placement }
    allow_insecure: true

node_templates:
  tier1:
    type: cloudify.nodes.nsx-t.Tier1
    properties:
      client_config: *client_config
      resource_config: { get_input: tier1_config }

  dhcb_server_config:
    type: cloudify.nodes.nsx-t.DhcpServerConfig
    properties:
      client_config: *client_config
      tier1_gateway_id: { get_attribute: [ tier1, id ] }
      resource_config: { get_input: dhcp_server_config }
    relationships:
      - type: cloudify.relationships.depends_on
        target: tier1

  segment:
    type: cloudify.nodes.nsx-t.Segment
    properties:
      client_config: *client_config
      resource_config: { get_input: segment_config }
    relationships:
      - type: cloudify.relationships.nsx-t.segment_connected_to_dhcp_server_config
        target: dhcb_server_config

  host:
    type: cloudify.vsphere.nodes.Server
    properties:
      connection_config: *connection_config
      agent_config:
        install_method: none
      allowed_clusters: { get_input: allowed_clusters }
      server:
        name: { get_input: server_name }
        template: { get_input: template }
        cpus: 1
        memory: 1024
      networking:
        connect_networks:
          - name: { get_attribute: [ segment, name ] }
            nsx_t_switch: { get_input: nsx_t_switch }
            use_dhcp: true
    relationships:
      - type: cloudify.relationships.server_connected_to_segment
        target: segment
        target_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            preconfigure:
              inputs:
                network_unique_id: { get_attribute: [ segment, unique_id ] }
                ip_v4_address: { get_input: ip_address }

  virtual_machine_inventory:
    type: cloudify.nodes.nsx-t.inventory.VirtualMachine
    properties:
      client_config: *client_config
      resource_config:
        vm_name: { get_attribute: [ host, name ] }
        network_id: { get_attribute: [ segment, id ] }
    relationships:
      - type: cloudify.relationships.nsx-t.inventory_connected_to_server
        target: host

outputs:
  target_network:
    value: { get_attribute: [ virtual_machine_inventory, { get_attribute: [ segment, id ] } ] }

  networks:
    value: { get_attribute: [ virtual_machine_inventory, networks ] }

  server_mac_address:
    value: { get_attribute: [ virtual_machine_inventory, { get_attribute: [ segment, id ] }, mac_address ] }

  server_ipv4_address:
    value: { get_attribute: [ virtual_machine_inventory, { get_attribute: [ segment,  id ] }, ipv4_addresses, 0 ] }

  server_ipv6_address:
    value: { get_attribute: [ virtual_machine_inventory, { get_attribute: [ segment, id ] }, ipv6_addresses, 0 ] }
